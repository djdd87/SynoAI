// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SynoAI.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240916203911_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("SynoAI.Core.Data.Camera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("QualityProfile")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("SynoAI.Core.Data.DetectionArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CameraId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcessorType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.ToTable("DetectionAreas");
                });

            modelBuilder.Entity("SynoAI.Core.Data.DetectionPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DetectionAreaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DetectionAreaId");

                    b.ToTable("DetectionPoints");
                });

            modelBuilder.Entity("SynoAI.Core.Data.DetectionTimeRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DetectionAreaId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DetectionAreaId");

                    b.ToTable("DetectionTimeRanges");
                });

            modelBuilder.Entity("SynoAI.Core.Data.Notifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotifierType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Notifiers");
                });

            modelBuilder.Entity("SynoAI.Core.Data.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("SynoAI.Core.Data.DetectionArea", b =>
                {
                    b.HasOne("SynoAI.Core.Data.Camera", "Camera")
                        .WithMany("DetectionAreas")
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camera");
                });

            modelBuilder.Entity("SynoAI.Core.Data.DetectionPoint", b =>
                {
                    b.HasOne("SynoAI.Core.Data.DetectionArea", "DetectionArea")
                        .WithMany("DetectionPoints")
                        .HasForeignKey("DetectionAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetectionArea");
                });

            modelBuilder.Entity("SynoAI.Core.Data.DetectionTimeRange", b =>
                {
                    b.HasOne("SynoAI.Core.Data.DetectionArea", "DetectionArea")
                        .WithMany("DetectionTimeRanges")
                        .HasForeignKey("DetectionAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetectionArea");
                });

            modelBuilder.Entity("SynoAI.Core.Data.Camera", b =>
                {
                    b.Navigation("DetectionAreas");
                });

            modelBuilder.Entity("SynoAI.Core.Data.DetectionArea", b =>
                {
                    b.Navigation("DetectionPoints");

                    b.Navigation("DetectionTimeRanges");
                });
#pragma warning restore 612, 618
        }
    }
}
